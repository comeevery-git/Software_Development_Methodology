name: Code Review with GPT

on:
  pull_request:
    types: [opened, synchronize]
  workflow_dispatch:

jobs:
  code_review:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v3

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.x'

    - name: Install dependencies
      run: |
        pip install openai requests

    - name: Generate diff for code review
      id: diff
      run: |
        git fetch origin ${{ github.event.pull_request.base.ref }} --depth=1
        git diff origin/${{ github.event.pull_request.base.ref }} ${{ github.sha }} > pr_diff.txt
      shell: bash

    - name: Perform Code Review with GPT and Comment on Changed Lines
      id: gpt_review
      run: |
        python <<EOF
        import openai
        import requests
        import json
    
        # OpenAI API Key 설정
        openai.api_key = "${{ secrets.OPENAI_API_KEY }}"
    
        # 시스템 프롬프트 및 모델명 가져오기
        system_prompt = """${{ secrets.SYSTEM_PROMPT }}"""
        model_name = "${{ secrets.OPENAI_MODEL }}"
    
        # 처리된 파일과 라인 기록 (중복 방지)
        processed_files = set()  # 각 파일을 기록
        processed_lines = {}  # 각 파일별로 라인을 기록하기 위한 딕셔너리로 수정
    
        # GitHub API 호출 로그
        print("Fetching changed files from GitHub API...")
    
        # 변경된 파일과 라인 정보를 가져오기 위한 GitHub API 호출
        files_url = f"https://api.github.com/repos/${{ github.repository }}/pulls/${{ github.event.pull_request.number }}/files"
        headers = {"Authorization": f"token ${{ secrets.GITHUB_TOKEN }}"}
        try:
            response = requests.get(files_url, headers=headers, timeout=10)
            print(f"GitHub API status code: {response.status_code}")  # 상태 코드 로그 출력
            response.raise_for_status()
        except requests.exceptions.RequestException as e:
            print(f"Error fetching files: {e}")
            exit(1)
    
        if response.status_code == 200:
            print("Files fetched successfully. Analyzing changes...")
            files_changed = response.json()
            print(f"Files Changed: {files_changed}")  # 응답 데이터 출력
    
            for file in files_changed:
                file_path = file['filename']
                
                # 이미 처리한 파일은 건너뛰기
                if file_path in processed_files:
                    print(f"Skipping already processed file: {file_path}")
                    continue
    
                # .java 파일만 처리
                if not file_path.endswith('.java'):
                    print(f"Skipping non-Java file: {file_path}")
                    continue
    
                print(f"Processing file: {file_path}")
                patch = file.get('patch', '')
                if not patch:
                    print(f"No patch data for file: {file_path}")
                    continue
    
                # 패치에서 변경된 라인의 위치를 추출
                lines = patch.split('\n')
                position = 0  # position은 패치 파일에서의 상대적인 위치
    
                for i, line in enumerate(lines):
                    if line.startswith('+') and not line.startswith('+++'):
                        position = i + 1  # 변경된 라인의 위치를 추적
    
                        # GPT API 호출 및 리뷰 코멘트 생성
                        print(f"Calling GPT API for patch in file: {file_path}")
                        gpt_response = openai.chat.completions.create(
                            model=model_name,
                            messages=[
                                {"role": "system", "content": system_prompt},
                                {"role": "user", "content": f"Here is the code diff for context:\n{patch}"}
                            ],
                            timeout=30
                        )
                        review_comment = gpt_response.choices[0].message.content
    
                        # 코멘트를 달기 위한 commit_id와 position 설정
                        commit_id = file['sha']
                        comment_body = {
                            "body": review_comment,
                            "path": file_path,
                            "position": position,
                            "commit_id": commit_id,
                            "side": "RIGHT"
                        }
    
                        # 코멘트를 달기 전에 로그 출력
                        print(f"Commenting on file: {file_path}, position: {position}")
    
                        comment_url = f"https://api.github.com/repos/${{ github.repository }}/pulls/${{ github.event.pull_request.number }}/comments"
                        response = requests.post(comment_url, headers=headers, data=json.dumps(comment_body))
    
                        # 응답 상태 확인
                        if response.status_code == 201:
                            print(f"Comment posted successfully for file: {file_path}")
                        else:
                            print(f"Failed to post comment. Status code: {response.status_code}, Response: {response.text}")
    
                # 각 파일을 처리한 후 파일 이름을 기록
                processed_files.add(file_path)
        else:
            print(f"Unexpected status code: {response.status_code}")
            exit(1)
    
        # 리뷰가 완료된 후 최종 요약 코멘트를 PR에 추가
        final_comment = "### 최종 리뷰 요약: .java 파일에 대한 모든 변경 사항을 검토 완료했습니다."
        comment_url = f"https://api.github.com/repos/${{ github.repository }}/issues/${{ github.event.pull_request.number }}/comments"
        requests.post(comment_url, headers=headers, data=json.dumps({"body": final_comment}))
        print("Final review comment posted.")
    
        # 리뷰 완료 후 종료
        print("Review completed. Exiting...")
        exit(0)
        EOF

