name: Code Review with GPT

on:
  pull_request:
    types: [opened, synchronize]
  workflow_dispatch:

jobs:
  code_review:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v3

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.x'

    - name: Install dependencies
      run: |
        pip install openai requests

    - name: Generate diff for code review
      id: diff
      run: |
        git fetch origin ${{ github.event.pull_request.base.ref }} --depth=1
        git diff origin/${{ github.event.pull_request.base.ref }} ${{ github.sha }} > pr_diff.txt
      shell: bash

    - name: Perform Code Review with GPT and Comment on Changed Lines
      id: gpt_review
      run: |
        python <<EOF
        import openai
        import requests
        import json

        # OpenAI API Key 설정
        openai.api_key = "${{ secrets.OPENAI_API_KEY }}"

        # 시스템 프롬프트 및 모델명 가져오기
        system_prompt = """${{ secrets.SYSTEM_PROMPT }}"""
        model_name = "${{ secrets.OPENAI_MODEL }}"

        # GitHub API 호출 로그
        print("Fetching changed files from GitHub API...")

        # 변경된 파일과 라인 정보를 가져오기 위한 GitHub API 호출
        files_url = "https://api.github.com/repos/${{ github.repository }}/pulls/${{ github.event.pull_request.number }}/files"
        headers = {"Authorization": f"token ${{ secrets.GITHUB_TOKEN }}"}
        try:
            response = requests.get(files_url, headers=headers, timeout=10)
            print(f"GitHub API status code: {response.status_code}")  # 상태 코드 로그 출력
            response.raise_for_status()
        except requests.exceptions.RequestException as e:
            print(f"Error fetching files: {e}")
            exit(1)

        if response.status_code == 200:
            print("Files fetched successfully. Analyzing changes...")
            files_changed = response.json()

            for file in files_changed:
                file_path = file['filename']
                print(f"Processing file: {file_path}")

                # .java 파일만 처리
                if file_path.endswith('.java'):
                    patch = file.get('patch', '')
                    print(f"Analyzing patch for file: {file_path}")

                    # 패치 파일에서 변경된 라인(+로 시작하는 라인과 -로 시작하는 라인) 처리
                    removed_lines = []
                    added_lines = []

                    for line in patch.split('\n'):
                        if line.startswith('-') and not line.startswith('***'):  # 삭제된 라인
                            removed_lines.append(line[1:].strip())
                        elif line.startswith('+') and not line.startswith('+++'):  # 추가된 라인
                            added_lines.append(line[1:].strip())

                    # 삭제된 라인과 추가된 라인을 모두 컨텍스트로 GPT에게 전달
                    for added_line in added_lines:
                        context = "\n".join(removed_lines + [added_line])  # 삭제된 라인과 추가된 라인을 컨텍스트로 묶기

                        if added_line:  # 추가된 내용이 있을 때만 GPT 분석
                            print(f"Calling GPT API for added line: {added_line}")
                            try:
                                gpt_response = openai.chat.completions.create(
                                    model=model_name,
                                    messages=[
                                        {"role": "system", "content": system_prompt},
                                        {"role": "user", "content": f"Here is the code diff for context:\n{context}"}
                                    ]
                                )
                            except Exception as e:
                                print(f"Error in GPT request: {e}")
                                continue

                            review_comment = gpt_response.choices[0].message.content
                            print(f"GPT response received for file: {file_path}")

                            # 변경된 파일과 라인에 리뷰 코멘트를 추가
                            position = file['changes']  # 변경된 라인 위치 정보
                            comment_body = {
                                "body": review_comment,
                                "path": file_path,
                                "position": position
                            }

                            comment_url = f"https://api.github.com/repos/${{ github.repository }}/pulls/${{ github.event.pull_request.number }}/comments"
                            print(f"Posting comment to GitHub for file: {file_path}")
                            requests.post(comment_url, headers=headers, data=json.dumps(comment_body))
        else:
            print(f"Unexpected status code: {response.status_code}")
            exit(1)
        EOF
