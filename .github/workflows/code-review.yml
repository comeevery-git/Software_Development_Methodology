name: Code Review with GPT

on:
  pull_request:
    types: [opened, synchronize]
  workflow_dispatch:

jobs:
  code_review:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v3

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.x'

    - name: Install dependencies
      run: |
        pip install openai requests

    - name: Generate diff for code review
      id: diff
      run: |
        git fetch origin ${{ github.event.pull_request.base.ref }} --depth=1
        git diff origin/${{ github.event.pull_request.base.ref }} ${{ github.sha }} > pr_diff.txt
      shell: bash

    - name: Perform Code Review with GPT and Comment on Changed Lines
      id: gpt_review
      run: |
        python - <<EOF
        import openai
        import requests
        import json

        # OpenAI API Key 설정
        openai.api_key = "${{ secrets.OPENAI_API_KEY }}"

        # 시스템 프롬프트 및 모델명 가져오기
        system_prompt = """${{ secrets.SYSTEM_PROMPT }}"""
        model_name = "${{ secrets.OPENAI_MODEL }}"

        # 변경된 파일과 라인 정보를 가져오기 위한 GitHub API 호출
        files_url = "https://api.github.com/repos/${{ github.repository }}/pulls/${{ github.event.pull_request.number }}/files"
        headers = {"Authorization": f"token ${{ secrets.GITHUB_TOKEN }}"}
        response = requests.get(files_url, headers=headers)

        if response.status_code == 200:
            files_changed = response.json()

            for file in files_changed:
                file_path = file['filename']
                for change in file['patch'].split('\n'):
                    if change.startswith('+'):  # 변경된 라인만 처리
                        line_content = change[1:].strip()

                        # GPT 모델 호출
                        gpt_response = openai.chat.completions.create(
                            model=model_name,
                            messages=[
                                {"role": "system", "content": system_prompt},
                                {"role": "user", "content": f"Here is the code diff for line:\n{line_content}"}
                            ]
                        )

                        review_comment = gpt_response.choices[0].message.content

                        # 변경된 파일과 라인에 리뷰 코멘트를 추가
                        position = file['changes']  # 변경된 라인 위치 정보
                        comment_body = {
                            "body": review_comment,
                            "path": file_path,
                            "position": position
                        }

                        comment_url = f"https://api.github.com/repos/${{ github.repository }}/pulls/${{ github.event.pull_request.number }}/comments"
                        requests.post(comment_url, headers=headers, data=json.dumps(comment_body))
        EOF
